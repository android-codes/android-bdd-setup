apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "com.jaredsburrows.spoon"
apply plugin: 'jacoco'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    defaultConfig {
        multiDexEnabled true
        applicationId "cucumber.cukeulator"
        testApplicationId "cucumber.cukeulator.test"
        testInstrumentationRunner "cucumber.cukeulator.test.CukeulatorAndroidJUnitRunner"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // With the following option we does not have to mock everything,
    // e.g. super calls cannot be mocked with Mockito only (just with Powermock).
    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled true
//        uncomment this to run tests with orchestrator
//        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        androidTest {
            assets {
                assets.srcDirs += ['src/androidTest/assets']
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8.toString()
        targetCompatibility JavaVersion.VERSION_1_8.toString()
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'

    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation "androidx.annotation:annotation:${rootProject.androidxAnnotationVersion}"
    implementation "androidx.recyclerview:recyclerview:${rootProject.androidxRecyclerVersion}"

    testImplementation 'junit:junit:4.13'
    testImplementation "org.robolectric:robolectric:" + rootProject.robolectricVersion
    testImplementation 'androidx.test.espresso:espresso-core:' + rootProject.espressoVersion
    testImplementation 'androidx.test.espresso:espresso-intents:' + rootProject.espressoVersion
    testImplementation 'androidx.test.ext:truth:' + rootProject.extTruthVersion

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation "androidx.test:runner:${rootProject.runnerVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${rootProject.espressoVersion}"

    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestUtil 'androidx.test:orchestrator:1.3.0'
    androidTestImplementation "io.cucumber:cucumber-picocontainer:${rootProject.pico_version}"
    androidTestImplementation "io.cucumber:cucumber-android:${rootProject.cucumber_javaVersion}"

    testImplementation "org.robolectric:robolectric:4.3.1"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.2"
    testImplementation "org.powermock:powermock-module-junit4:2.0.2"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    androidTestImplementation('com.schibsted.spain:barista:3.3.0') {
        exclude group: 'org.jetbrains.kotlin'
    }

}

task runInstrumentationTests {
    group "verification"
    mustRunAfter "deleteExistingCucumberReports"
    dependsOn "deleteExistingCucumberReports","spoonDebugAndroidTest"
    finalizedBy "downloadCucumberReports"
}

spoon {
    debug = true
    //this is faster but can be set to false
    singleInstrumentationCall = true
    grantAll = true
    shard = true
}


/*
 * Downloads all Cucumber reports from the connected device.
 */
task downloadCucumberReports {
    group "Verification"
    description "Downloads the rich Cucumber report files (HTML, XML, JSON) from the connected device"

    doLast {
        def deviceSourcePath = getCucumberDevicePath()
        def localReportPath = new File(buildDir, "reports/cucumber")
        if (!localReportPath.exists()) {
            localReportPath.mkdirs()
        }
        if (!localReportPath.exists()) {
            throw new GradleException("Could not create $localReportPath")
        }
        def adb = getAdbPath()
        def files = getCucumberReportFileNames()
        files.each { fileName ->
            exec {
                commandLine adb, 'pull', "$deviceSourcePath/$fileName", localReportPath
            }
        }
    }
}

/**
 * Deletes existing Cucumber reports on the device.
 */
task deleteExistingCucumberReports {
    group "Verification"
    description "Removes the rich Cucumber report files (HTML, XML, JSON) from the connected device"
    doLast {
        def deviceSourcePath = getCucumberDevicePath()
        def files = getCucumberReportFileNames()
        files.each { fileName ->
            def deviceFileName = deviceSourcePath + '/' + fileName
            def output2 = executeAdb('if [ -d "' + deviceFileName + '" ]; then rm -r "' + deviceFileName + '"; else rm -r "' + deviceFileName + '" ; fi')
            println output2
        }
    }
}

/**
 * Sets the required permissions for Cucumber to write on the internal storage.
 */
task grantPermissions(dependsOn: 'installDebug') {
    doLast {
        def adb = getAdbPath()
        // We only set the permissions for the main application
        def mainPackageName = android.defaultConfig.applicationId
        def readPermission = "android.permission.READ_EXTERNAL_STORAGE"
        def writePermission = "android.permission.WRITE_EXTERNAL_STORAGE"
        exec { commandLine adb, 'shell', 'pm', 'grant', mainPackageName, readPermission }
        exec { commandLine adb, 'shell', 'pm', 'grant', mainPackageName, writePermission }
    }
}


// ==================================================================
// Utility methods
// ==================================================================

/**
 * Utility method to get the full ADB path
 * @return the absolute ADB path
 */
String getAdbPath() {
    def adb = android.getAdbExecutable().toString()
    if (adb.isEmpty()) {
        throw new GradleException("Could not detect adb path")
    }
    return adb
}

/**
 * Sometime adb returns '\r' character multiple times.
 * @param s the original string returned by adb
 * @return the fixed string without '\r'
 */
static def fixAdbOutput(String s) {
    return s.replaceAll("[\r\n]+", "\n").trim()
}

/**
 * Runs the adb tool
 * @param program the program which is executed on the connected device
 * @return the output of the adb tool
 */
def executeAdb(String program) {
    def process = new ProcessBuilder(getAdbPath(), "shell", program).redirectErrorStream(true).start()
    String text = new BufferedReader(new InputStreamReader(process.inputStream)).text
    return fixAdbOutput(text)
}

/**
 * The path which is used to store the Cucumber files.
 * @return
 */
def getCucumberDevicePath() {
    return 'sdcard/Android/data/cucumber.cukeulator/files/reports'
}

/**
 * @return the known Cucumber report files/directories
 */
static def getCucumberReportFileNames() {
    return ['cucumber.xml', 'cucumber.html']
}